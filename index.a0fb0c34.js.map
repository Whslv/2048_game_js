{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.board = initialState || this.createEmptyBoard();\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    addRandomTile() {\n        const empty = [];\n        for(let r = 0; r < this.size; r++){\n            for(let c = 0; c < this.size; c++)if (this.board[r][c] === 0) empty.push([\n                r,\n                c\n            ]);\n        }\n        if (empty.length === 0) return;\n        const [row, col] = empty[Math.floor(Math.random() * empty.length)];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        this.lastSpawned = {\n            row: row,\n            col: col\n        };\n    }\n    compress(row) {\n        const filtered = row.filter((v)=>v !== 0);\n        while(filtered.length < this.size)filtered.push(0);\n        return filtered;\n    }\n    merge(row, coordMapper) {\n        for(let i = 0; i < this.size - 1; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n            row[i] *= 2;\n            if (row[i] > this.score) this.score = row[i];\n            row[i + 1] = 0;\n            if (!this.mergedPositions) this.mergedPositions = [];\n            this.mergedPositions.push(coordMapper(i));\n        }\n        return row;\n    }\n    operate(row, coordMapper) {\n        let r = this.compress(row);\n        r = this.merge(r, coordMapper);\n        r = this.compress(r);\n        return r;\n    }\n    moveLeft() {\n        let changed = false;\n        for(let r = 0; r < this.size; r++){\n            const newRow = this.operate(this.board[r], (i)=>({\n                    row: r,\n                    col: i\n                }));\n            if (newRow.toString() !== this.board[r].toString()) changed = true;\n            this.board[r] = newRow;\n        }\n        if (changed) this.addRandomTile();\n    }\n    moveRight() {\n        let changed = false;\n        for(let r = 0; r < this.size; r++){\n            const reversed = [\n                ...this.board[r]\n            ].reverse();\n            const newRow = this.operate(reversed, (i)=>({\n                    row: r,\n                    col: this.size - 1 - i\n                })).reverse();\n            if (newRow.toString() !== this.board[r].toString()) changed = true;\n            this.board[r] = newRow;\n        }\n        if (changed) this.addRandomTile();\n    }\n    moveUp() {\n        let changed = false;\n        for(let c = 0; c < this.size; c++){\n            const col = this.board.map((row)=>row[c]);\n            const newCol = this.operate(col, (i)=>({\n                    row: i,\n                    col: c\n                }));\n            for(let r = 0; r < this.size; r++){\n                if (this.board[r][c] !== newCol[r]) changed = true;\n                this.board[r][c] = newCol[r];\n            }\n        }\n        if (changed) this.addRandomTile();\n    }\n    moveDown() {\n        let changed = false;\n        for(let c = 0; c < this.size; c++){\n            const col = this.board.map((row)=>row[c]).reverse();\n            const newCol = this.operate(col, (i)=>({\n                    row: this.size - 1 - i,\n                    col: c\n                })).reverse();\n            for(let r = 0; r < this.size; r++){\n                if (this.board[r][c] !== newCol[r]) changed = true;\n                this.board[r][c] = newCol[r];\n            }\n        }\n        if (changed) this.addRandomTile();\n    }\n    isMovePossible() {\n        for(let r = 0; r < this.size; r++)for(let c = 0; c < this.size; c++){\n            if (this.board[r][c] === 0) return true;\n            if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) return true;\n            if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) return true;\n        }\n        return false;\n    }\n    isWin() {\n        if (this.score === 2048) this.status = \"win\";\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$scoreEl = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message.message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message.message-lose\");\nconst $09e991522ca7e64e$var$messageWinner = document.querySelector(\".message.message-win\");\nfunction $09e991522ca7e64e$var$render() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$scoreEl.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = state[row][col];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell\";\n        if (value > 0) {\n            cell.className = `field-cell field-cell--${value}`;\n            if ($09e991522ca7e64e$var$game.mergedPositions?.some((p)=>p.row === row && p.col === col)) {\n                cell.classList.add(\"merge\");\n                setTimeout(()=>cell.classList.remove(\"merge\"), 300);\n            }\n            if ($09e991522ca7e64e$var$game.lastSpawned && $09e991522ca7e64e$var$game.lastSpawned.row === row && $09e991522ca7e64e$var$game.lastSpawned.col === col) {\n                cell.classList.add(\"spawn\");\n                setTimeout(()=>cell.classList.remove(\"spawn\"), 300);\n            }\n        }\n    });\n    $09e991522ca7e64e$var$game.mergedPositions = [];\n    $09e991522ca7e64e$var$game.lastSpawned = null;\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWinner.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startBtn.textContent = \"Reset\";\n    $09e991522ca7e64e$var$startBtn.className = \"button restart\";\n    $09e991522ca7e64e$var$render();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const beforeMove = JSON.stringify($09e991522ca7e64e$var$game.getState());\n    if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    const afterMove = JSON.stringify($09e991522ca7e64e$var$game.getState());\n    if (beforeMove !== afterMove) {\n        $09e991522ca7e64e$var$render();\n        if (!$09e991522ca7e64e$var$game.isMovePossible()) {\n            $09e991522ca7e64e$var$game.status = \"lose\";\n            $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        }\n    }\n    if ($09e991522ca7e64e$var$game.score === 2048) {\n        $09e991522ca7e64e$var$game.status = \"win\";\n        $09e991522ca7e64e$var$messageWinner.classList.remove(\"hidden\");\n    }\n});\n\n\n//# sourceMappingURL=index.a0fb0c34.js.map\n","'use strict';\n\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst startBtn = document.querySelector('.button.start');\nconst scoreEl = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message.message-start');\nconst messageLose = document.querySelector('.message.message-lose');\nconst messageWinner = document.querySelector('.message.message-win');\n\nfunction render() {\n  const state = game.getState();\n\n  scoreEl.textContent = game.getScore();\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = state[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = 'field-cell';\n\n    if (value > 0) {\n      cell.className = `field-cell field-cell--${value}`;\n\n      if (game.mergedPositions?.some((p) => p.row === row && p.col === col)) {\n        cell.classList.add('merge');\n        setTimeout(() => cell.classList.remove('merge'), 300);\n      }\n\n      if (\n        game.lastSpawned &&\n        game.lastSpawned.row === row &&\n        game.lastSpawned.col === col\n      ) {\n        cell.classList.add('spawn');\n        setTimeout(() => cell.classList.remove('spawn'), 300);\n      }\n    }\n  });\n  game.mergedPositions = [];\n  game.lastSpawned = null;\n}\n\nstartBtn.addEventListener('click', () => {\n  game.start();\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWinner.classList.add('hidden');\n  startBtn.textContent = 'Reset';\n  startBtn.className = 'button restart';\n  render();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const beforeMove = JSON.stringify(game.getState());\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  const afterMove = JSON.stringify(game.getState());\n\n  if (beforeMove !== afterMove) {\n    render();\n\n    if (!game.isMovePossible()) {\n      game.status = 'lose';\n      messageLose.classList.remove('hidden');\n    }\n  }\n\n  if (game.score === 2048) {\n    game.status = 'win';\n    messageWinner.classList.remove('hidden');\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.board = initialState || this.createEmptyBoard();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const empty = [];\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          empty.push([r, c]);\n        }\n      }\n    }\n\n    if (empty.length === 0) {\n      return;\n    }\n\n    const [row, col] = empty[Math.floor(Math.random() * empty.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n\n    this.lastSpawned = { row, col };\n  }\n  compress(row) {\n    const filtered = row.filter((v) => v !== 0);\n\n    while (filtered.length < this.size) {\n      filtered.push(0);\n    }\n\n    return filtered;\n  }\n  merge(row, coordMapper) {\n    for (let i = 0; i < this.size - 1; i++) {\n      if (row[i] !== 0 && row[i] === row[i + 1]) {\n        row[i] *= 2;\n\n        if (row[i] > this.score) {\n          this.score = row[i];\n        }\n        row[i + 1] = 0;\n\n        if (!this.mergedPositions) {\n          this.mergedPositions = [];\n        }\n        this.mergedPositions.push(coordMapper(i));\n      }\n    }\n\n    return row;\n  }\n  operate(row, coordMapper) {\n    let r = this.compress(row);\n\n    r = this.merge(r, coordMapper);\n    r = this.compress(r);\n\n    return r;\n  }\n\n  moveLeft() {\n    let changed = false;\n\n    for (let r = 0; r < this.size; r++) {\n      const newRow = this.operate(this.board[r], (i) => ({ row: r, col: i }));\n\n      if (newRow.toString() !== this.board[r].toString()) {\n        changed = true;\n      }\n      this.board[r] = newRow;\n    }\n\n    if (changed) {\n      this.addRandomTile();\n    }\n  }\n  moveRight() {\n    let changed = false;\n\n    for (let r = 0; r < this.size; r++) {\n      const reversed = [...this.board[r]].reverse();\n      const newRow = this.operate(reversed, (i) => ({\n        row: r,\n        col: this.size - 1 - i,\n      })).reverse();\n\n      if (newRow.toString() !== this.board[r].toString()) {\n        changed = true;\n      }\n      this.board[r] = newRow;\n    }\n\n    if (changed) {\n      this.addRandomTile();\n    }\n  }\n  moveUp() {\n    let changed = false;\n\n    for (let c = 0; c < this.size; c++) {\n      const col = this.board.map((row) => row[c]);\n      const newCol = this.operate(col, (i) => ({ row: i, col: c }));\n\n      for (let r = 0; r < this.size; r++) {\n        if (this.board[r][c] !== newCol[r]) {\n          changed = true;\n        }\n        this.board[r][c] = newCol[r];\n      }\n    }\n\n    if (changed) {\n      this.addRandomTile();\n    }\n  }\n  moveDown() {\n    let changed = false;\n\n    for (let c = 0; c < this.size; c++) {\n      const col = this.board.map((row) => row[c]).reverse();\n      const newCol = this.operate(col, (i) => ({\n        row: this.size - 1 - i,\n        col: c,\n      })).reverse();\n\n      for (let r = 0; r < this.size; r++) {\n        if (this.board[r][c] !== newCol[r]) {\n          changed = true;\n        }\n        this.board[r][c] = newCol[r];\n      }\n    }\n\n    if (changed) {\n      this.addRandomTile();\n    }\n  }\n\n  isMovePossible() {\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n\n        if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n\n        if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isWin() {\n    if (this.score === 2048) {\n      this.status = 'win';\n    }\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","createEmptyBoard","Array","from","length","fill","getScore","getState","getStatus","start","addRandomTile","restart","empty","r","c","push","row","col","Math","floor","random","lastSpawned","compress","filtered","filter","v","merge","coordMapper","i","mergedPositions","operate","moveLeft","changed","newRow","toString","moveRight","reversed","reverse","moveUp","map","newCol","moveDown","isMovePossible","isWin","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$scoreEl","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWinner","$09e991522ca7e64e$var$render","state","textContent","forEach","cell","index","value","className","some","p","classList","add","setTimeout","remove","addEventListener","e","beforeMove","JSON","stringify","key"],"version":3,"file":"index.a0fb0c34.js.map"}